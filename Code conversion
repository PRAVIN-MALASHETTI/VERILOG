// Q1. Binary Code to Gray Code conversion using 

//Behavioral modeling
module b_2_g(
    input [3:0]b,
    output reg [3:0]g
);

always @(b)
begin
    g[3] = b[3];
    g[2] = b[3]^b[2];
    g[2] = b[2]^b[1];
    g[2] = b[1]^b[0];
end

endmodule

//Dataflow modeling
module b_2_g(
    input [3:0]b,
    output [3:0]g
);

assign g[3] = b[3], g[2] = b[3]^b[2], g[1] = b[2]^b[1], g[0] = b[1]^b[0];

endmodule


//Gate level modeling
module b_2_g(
    input [3:0]b,
    output [3:0]g
);

buf b1(g[3],b[3]);
xor x1(g[2],b[3],b[2]);
xor x2(g[1],b[2],b[1]);
xor x3(g[0],b[1],b[0]);

endmodule





// Q2. Gray Code to Binary Code conversion using 

//Behavioral modeling
module g_2_b(
    input [3:0]g,
    output reg [3:0]b
);

always @(g)
begin
    b[3] = g[3];
    b[2] = b[3]^g[2];
    b[2] = b[2]^g[1];
    b[2] = b[1]^g[0];
end

endmodule

//Dataflow modeling
module g_2_b(
    input [3:0]g,
    output [3:0]b
);

assign b[3] = g[3], b[2] = b[3]^g[2], b[1] = b[2]^g[1], b[0] = b[1]^g[0];

endmodule


//Gate level modeling
module g_2_b(
    input [3:0]g,
    output [3:0]b
);

buf b1(b[3],g[3]);
xor x1(b[2],b[3],g[2]);
xor x2(b[1],b[2],g[1]);
xor x3(b[0],b[1],g[0]);

endmodule
