// Decoders using 

// Behavioral modeling

//2X4 Decoder
module Decoder(
  input en,
  input [1:0]i,
  output reg [3:0]y
);

always @(en or i)
case({en,i})
  3'b100 : y = 4'b0001;
  3'b101 : y = 4'b0010;
  3'b110 : y = 4'b0100;
  3'b111 : y = 4'b1000;
  3'b000,3'b001,3'b010,3'b011 : y = 4'0000;
  default : y = 4'bx;
endcase

endmodule


//3X8 Decoder
module Decoder(
  input en,
  input [2:0]i,
  output reg [7:0]y
);

always @(en or i)
case({en,i})
  3'b1_000 : y = 4'b0000_0001;
  3'b1_001 : y = 4'b0000_0010;
  3'b1_010 : y = 4'b0000_0100;
  3'b1_011 : y = 4'b0000_1000;
  3'b1_100 : y = 4'b0001_0000;
  3'b1_101 : y = 4'b0010_0000;
  3'b1_110 : y = 4'b0100_0000;
  3'b1_111 : y = 4'b1000_0000;
  3'b0000,3'b0001,3'b0010,3'b0011,3'b0100,3'b0101,3'b0110,3'b0111 : y = 4'0000;
  default : y = 4'bx;
endcase

endmodule

// Dataflow modeling
//2X4 Decoder
module Decoder(
  input en,
  input [1:0]i,
  output [3:0]y
);

 assign y = {en & i[1] & i[0],
             en & i[1] & ~i[0],
             en & ~i[1] & i[0],
             en & ~i[1] & ~i[0]
            }

endmodule

//3X8 Decoder
module Decoder(
  input en,
  input [2:0]i,
  output [7:0]y
);

 assign y = {en & i[2] & i[1] & i[0],
             en & i[2] & i[1] & ~i[0],
             en & i[2] & ~i[1] & i[0],
             en & i[2] & ~i[1] & ~i[0]
             en & ~i[2] & i[1] & i[0],
             en & ~i[2] & i[1] & ~i[0],
             en & ~i[2] & ~i[1] & i[0],
             en & ~i[2] & ~i[1] & ~i[0]
            }

endmodule
